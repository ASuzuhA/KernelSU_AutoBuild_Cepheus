# This is a basic workflow to help you get started with Actions

name: PixelOS_build_kernel

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE: 
        description: 'Kernel Source'
        required: true
        default: 'https://github.com/balgxmr/kernel_xiaomi_cepheus'
        
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'thirteen'
      
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'cepheus_defconfig'
      
      KERNEL_NAME:
        required: false
        default: 'PixelOS'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: dTest
        run: |
          sudo mkdir /root/pixelos/prebuilts/clang/host/linux-x86/clang-azure/ -p
          
          sudo git clone https://github.com/nozomanai/KernelSU_AutoBuild_Cepheus.git /root/pixelos/prebuilts/clang/host/linux-x86/clang-azure --depth=1

          sudo ls /root/pixelos/prebuilts/clang/host/linux-x86/clang-azure -l
          pwd
      
#       - name: download kernel source
#         run: |
#           cd $GITHUB_WORKSPACE && mkdir kernel_workspace && cd kernel_workspace
#           git clone ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1

#       - name: setup build kernel environment
#         run: |
#           sudo apt-get update
#           sudo apt install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev unzip openjdk-8-jdk language-pack-zh-hans
          

#       - name: add kernelsu 
#         run: |
#             cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
            
#             echo "CONFIG_KPROBES=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
#             echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
#             echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
            
#             curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        
# #       - name: change build config
# #         run: |
# #           cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
# #           sed -i '/supported.versions.*/d' anykernel.sh
# #           sed -i '/do.devicecheck.*/d' anykernel.sh
# #           sed -i 's/KERNEL_NAME=.*/KERNEL_NAME=${{ github.event.inputs.KERNEL_NAME}}-$DATE/g' build.sh
       


#       - name: build kernel
#         run: |
#           cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
#           rm .git -R
#           sudo bash build.sh
          
          
#       - name: release
#         uses: "marvinpinto/action-automatic-releases@latest"
#         with:
#           automatic_release_tag: "latest"
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           prerelease: false
#           files: |
#             kernel_workspace/android-kernel/out/*.zip
